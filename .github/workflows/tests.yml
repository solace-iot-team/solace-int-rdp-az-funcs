# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2021, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

name: tests
on:
  # for testing
  workflow_dispatch:
  push:
    branches:
      feature-app-settings

  # schedule:
  #   # - cron: '0 5 * * THU'
  #   - cron: '0 5 * * *'

  # pull_request:
  #   branches:
  #     - master

env:
  DEBUG_FLAG: ${{ true }}
  TEST_HOME: "test"

jobs:
  run_tests:
    runs-on: ubuntu-18.04
    steps:
      - name: Check Auth
        if: github.event_name == 'workflow_dispatch' && github.actor != 'ricardojosegomezulmke'
        run: |
          echo "not authorized"
          echo '::set-output name=IS_AUTHORIZED::false'
        id: auth
      - name: Cancel Workflow
        if: ${{ always() && steps.auth.outputs.IS_AUTHORIZED == 'false' }}
        uses: andymckay/cancel-action@0.2

      - name: env before install
        if: env.DEBUG_FLAG == 'true'
        run: |
          echo "pre-installed versions"
          echo "bash --version: "; bash --version
          echo "node --version: "; node --version
          echo "npm --version: "; npm --version
          echo "python3 --version: "; python3 --version
          echo "pip --version: "; pip --version
          echo "jq --version: "; jq --version
          echo "environment: TEST_* "
          env | grep TEST

      - name: install components
        run: |
          sudo apt install python3-pip
          sudo python -m pip install --upgrade pip

      - name: env after install
        if: env.DEBUG_FLAG == 'true'
        run: |
          echo "pre-installed versions"
          echo "bash --version: "; bash --version
          echo "node --version: "; node --version
          echo "npm --version: "; npm --version
          echo "python3 --version: "; python3 --version
          echo "pip --version: "; pip --version
          echo "jq --version: "; jq --version
          echo "environment: TEST_* "
          env | grep TEST

      # - name: Azure Login
      #   # https://github.com/marketplace/actions/azure-login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{secrets.AZURE_CREDENTIALS}}


      - name: check installed versions
        if: env.DEBUG_FLAG == 'true'
        run: |
          node --version
          npm --version
          python3 --version
          jq --version

      # - name: Print test env
      #   if: env.DEBUG_FLAG == 'true'
      #   run: |
      #     env | grep TEST
      #
      # - name: Dump GitHub context
      #   if: env.DEBUG_FLAG == 'true'
      #   run: |
      #     echo "entire 'github' object"
      #     echo "${{ toJson(github) }}"
      #
      # - name: Print github env before checkout
      #   if: env.DEBUG_FLAG == 'true'
      #   run: |
      #     pwd
      #     echo "GITHUB_SHA=$GITHUB_SHA"
      #     echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
      #     echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
      #     echo "GITHUB_REF=$GITHUB_REF"
      #     echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
      #     echo "github.token=${{ github.token }}"
      #
      # - name: Checkout Current Branch
      #   uses: actions/checkout@master
      #   with:
      #     ref: ${{ github.ref }}
      #
      # - name: List Workspace
      #   if: env.DEBUG_FLAG == 'true'
      #   run: |
      #     cd $GITHUB_WORKSPACE
      #     ls -la
      #     cd
      #
      # - name: Azure Login
      #   # https://github.com/marketplace/actions/azure-login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{secrets.AZURE_CREDENTIALS}}
      #
      # - name: Create Azure Resource Group
      #   run: |
      #     AZURE_RESOURCE_GROUP="${TEST_CONTROLLER_ID}-${TEST_AZURE_PROJECT}-rg"
      #     AZURE_PROJECT_TAG="${TEST_CONTROLLER_ID}-${TEST_AZURE_PROJECT}"
      #     az group create \
      #       --name $AZURE_RESOURCE_GROUP \
      #       --location ${TEST_LOCATION} \
      #       --tags project=$AZURE_PROJECT_TAG \
      #       --verbose
      #
      # - name: Standup Controller
      #   id: azure_deploy
      #   # https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
      #   uses: azure/arm-deploy@v1.0.1
      #   with:
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     resourceGroupName: ${{ env.TEST_CONTROLLER_ID }}-${{ env.TEST_AZURE_PROJECT }}-rg
      #     template: ${{ env.TEST_AZURE_DEPLOY_ARM_TEMPLATE }}
      #     parameters: vm_admin_public_key="${{ secrets.CONTROLLER_VM_PUBLIC_KEY }}" project_prefix=${{ env.TEST_CONTROLLER_ID }}-${{ env.TEST_AZURE_PROJECT }} zone=${{ env.TEST_ZONE }} vm_admin_username=${{ env.TEST_VM_ADMIN_USERNAME }}
      #
      # - name: Configure SSH
      #   run: |
      #     mkdir -p ~/.ssh/
      #     echo "${SSH_KEY}" > ~/.ssh/controller_key
      #     chmod 600 ~/.ssh/controller_key
      #     cat >>~/.ssh/config <<END
      #     Host controller
      #       HostName ${SSH_HOST}
      #       User ${SSH_USER}
      #       IdentityFile ~/.ssh/controller_key
      #       StrictHostKeyChecking no
      #     END
      #     chmod 600 ~/.ssh/config
      #     # cat ~/.ssh/config
      #   env:
      #     SSH_USER: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     SSH_KEY: ${{ secrets.CONTROLLER_VM_PRIVATE_KEY }}
      #     SSH_HOST: ${{ steps.azure_deploy.outputs.publicIPAddress }}
      #
      # - name: Controller - Connect SSH Script - retry until successful
      # # ensures that connection can be established
      #   run: |
      #     ${{ env.TEST_SSH_CONNECT_SCRIPT }}
      #
      # - name: Controller - Connect SSH
      # # ensures that connection can be established
      #   run: |
      #     ssh controller "
      #
      #       touch ssh_connect_SUCCESS.log
      #
      #       echo "successfully connected to controller via ssh"
      #
      #     "
      #
      # - name: Controller - Set Bash Profile
      #   if: env.DEBUG_FLAG == 'true'
      #   run: |
      #     ssh controller "
      #
      #         echo 'export ARM_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"' >> ~/.bash_profile
      #
      #         echo 'export ARM_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"' >> ~/.bash_profile
      #
      #         echo 'export ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"' >> ~/.bash_profile
      #
      #         echo 'export ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"' >> ~/.bash_profile
      #
      #         echo 'export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"' >> ~/.bash_profile
      #
      #         echo 'export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"' >> ~/.bash_profile
      #
      #     "
      #
      # # - name: DEBUG - EXIT - Use Controller Manually
      # #   run: |
      # #     echo "Fully setup Controller - ready to use manually"
      # #     exit 1
      #
      # - name: Controller - Copy bootstrap script
      #   # https://github.com/garygrossgarten/github-action-scp
      #   # no error handling: workflow will not fail on error
      #   uses: garygrossgarten/github-action-scp@release
      #   with:
      #     local: ${{ env.TEST_BOOTSTRAP_SH }}
      #     remote: bootstrap.sh
      #     host: ${{ steps.azure_deploy.outputs.publicIPAddress }}
      #     username: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     privateKey: ${{ secrets.CONTROLLER_VM_PRIVATE_KEY }}
      #
      # - name: Controller - Set Bootstrap to Executable
      #   run: |
      #     ssh controller "chmod u+x bootstrap.sh"
      #
      # - name: Controller - Run Bootstrap
      #   run: |
      #     ssh controller "./bootstrap.sh > ./bootstrap.sh.log"
      #
      # - name: Controller - Get Repo Ref
      #   env:
      #     CLONE_URL: ${{ github.event.repository.clone_url }}
      #   run: |
      #     ssh controller "\
      #         rm -rf "${TEST_CONTROLLER_REPO_DIR}" && \
      #         mkdir -p "${TEST_CONTROLLER_REPO_DIR}" && \
      #         cd "${TEST_CONTROLLER_REPO_DIR}" && \
      #         git init && \
      #         git remote add origin "${CLONE_URL}" && \
      #         git fetch origin "${GITHUB_SHA}" && \
      #         git reset --hard FETCH_HEAD
      #     "
      #
      # - name: Controller - Bootstrap - SSH Keys
      #   run: |
      #     ssh controller "\
      #         cd "${TEST_CONTROLLER_REPO_DIR}/${TEST_REPO_KEYS_DIR}" && \
      #         ssh-keygen -t rsa -b 4096 -N '' -f ${TEST_AZURE_KEY_FILE} <<< y && \
      #         ssh-keygen -t rsa -b 4096 -N '' -f ${TEST_AWS_KEY_FILE} <<< y && \
      #         echo "keys generated:" && \
      #         ls -la
      #     "
      #
      # - name: Controller - Bootstrap - Terraform
      #   run: |
      #     ssh controller "\
      #         cd "${TEST_CONTROLLER_REPO_DIR}/${TEST_REPO_INFRA_SA_AZURE_DIR}" && \
      #         terraform init && \
      #         ls -la && \
      #         cd ~/"${TEST_CONTROLLER_REPO_DIR}/${TEST_REPO_INFRA_SA_AWS_DIR}" && \
      #         terraform init && \
      #         ls -la && \
      #         echo "terraform initialized"
      #     "
      #
      # ###############
      # # Example of how to log into Azure manually
      # # - name: Controller - Bootstrap - Azure login
      # #   run: |
      # #     ssh controller "\
      # #         az login --service-principal \
      # #           --username ${{ secrets.AZURE_CLIENT_ID }} \
      # #           --password ${{ secrets.AZURE_CLIENT_SECRET }} \
      # #           --tenant ${{ secrets.AZURE_TENANT_ID }}
      # #
      # #         echo "azure login succeeded"
      # #     "
      #
      # - name: Controller - Infra Apply - Link Docker Image into Repo
      #   run: |
      #     ssh controller "
      #
      #         cd "${TEST_CONTROLLER_REPO_DIR}/${TEST_BIN_PUBSUB_DIR}"
      #
      #         ln -s ~/downloads/solace-pubsub-evaluation-docker.tar.gz solace-pubsub-docker.tar.gz
      #
      #         ls -la
      #
      #     "
      #
      # - name: Controller - Infra Apply
      #   run: |
      #     ssh controller "
      #
      #         source .bash_profile
      #
      #         export ARM_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
      #
      #         export ARM_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
      #
      #         export ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      #
      #         export ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
      #
      #         export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
      #
      #         export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      #
      #         cd "${TEST_CONTROLLER_REPO_DIR}/${TEST_REPO_INFRA_DIR}"
      #
      #         ./${TEST_REPO_INFRA_APPLY_SCRIPT}
      #
      #     "
      #
      # - name: Controller - Infra - Download Shared Setup
      #   if: always()
      #   env:
      #     SSH_USER: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     REPO_LOGS_DIR: ${{ env.TEST_CONTROLLER_REPO_DIR }}/${{ env.TEST_REPO_SHARED_SETUP }}
      #     RUNNER_ASSET_DIR: ./${{ env.TEST_RUNNER_ASSETS_DIR }}/${{ env.TEST_REPO_SHARED_SETUP }}
      #   run: |
      #     mkdir -p ./${RUNNER_ASSET_DIR}
      #     sftp -p -r ${SSH_USER}:${REPO_LOGS_DIR}/*.json ${RUNNER_ASSET_DIR}
      #
      # - name: Controller - Test Runs
      #   run: |
      #     ssh controller "
      #
      #         source .bash_profile
      #
      #         cd "${TEST_CONTROLLER_REPO_DIR}/${TEST_REPO_TESTS_DIR}"
      #
      #         ./${TEST_REPO_TESTS_RUN_SCRIPT}
      #
      #     "
      #
      # - name: Controller - Download Test Logs
      #   if: always()
      #   env:
      #     SSH_USER: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     REPO_LOGS_DIR: ${{ env.TEST_CONTROLLER_REPO_DIR }}/${{ env.TEST_REPO_TESTS_DIR }}/${{ env.TEST_REPO_TESTS_LOGS_DIR }}
      #     RUNNER_ASSET_DIR: ./${{ env.TEST_RUNNER_ASSETS_DIR }}/${{ env.TEST_RUNNER_ASSETS_TESTS_LOGS_DIR }}
      #   run: |
      #     mkdir -p ./${RUNNER_ASSET_DIR}
      #     sftp -p -r ${SSH_USER}:${REPO_LOGS_DIR}/* ${RUNNER_ASSET_DIR}
      #
      # - name: Controller - Download Test Results
      #   if: always()
      #   env:
      #     SSH_USER: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     REPO_DIR: ${{ env.TEST_CONTROLLER_REPO_DIR }}/${{ env.TEST_REPO_TEST_RESULTS_DIR }}
      #     RUNNER_ASSET_DIR: ./${{ env.TEST_RUNNER_ASSETS_DIR }}/${{ env.TEST_RUNNER_ASSETS_TEST_RESULTS_DIR }}
      #   run: |
      #     mkdir -p ./${RUNNER_ASSET_DIR}
      #     sftp -p -r ${SSH_USER}:${REPO_DIR}/* ${RUNNER_ASSET_DIR}
      #
      # - name: Controller - Run Analytics
      #   run: |
      #     ssh controller "
      #
      #         source .bash_profile
      #
      #         cd "${TEST_CONTROLLER_REPO_DIR}/${TEST_REPO_ANALYTICS_DIR}"
      #
      #         ./${TEST_REPO_ANALYTICS_RUN_SCRIPT}
      #
      #     "
      #
      # - name: Controller - Download Analytics Logs
      #   if: always()
      #   env:
      #     SSH_USER: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     REPO_LOGS_DIR: ${{ env.TEST_CONTROLLER_REPO_DIR }}/${{ env.TEST_REPO_ANALYTICS_DIR }}/${{ env.TEST_REPO_ANALYTICS_LOGS_DIR }}
      #     RUNNER_ASSET_DIR: ./${{ env.TEST_RUNNER_ASSETS_DIR }}/${{ env.TEST_RUNNER_ASSETS_ANALYTICS_LOGS_DIR }}
      #   run: |
      #     mkdir -p ./${RUNNER_ASSET_DIR}
      #     sftp -p -r ${SSH_USER}:${REPO_LOGS_DIR}/* ${RUNNER_ASSET_DIR}
      #
      # - name: Controller - Download Analytics Results
      #   if: always()
      #   env:
      #     SSH_USER: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     REPO_DIR: ${{ env.TEST_CONTROLLER_REPO_DIR }}/${{ env.TEST_REPO_ANALYTICS_RESULTS_DIR }}
      #     RUNNER_ASSET_DIR: ./${{ env.TEST_RUNNER_ASSETS_DIR }}/${{ env.TEST_RUNNER_ASSETS_ANALYTICS_RESULTS_DIR }}
      #   run: |
      #     mkdir -p ./${RUNNER_ASSET_DIR}
      #     sftp -p -r ${SSH_USER}:${REPO_DIR}/* ${RUNNER_ASSET_DIR}
      #
      # - name: Controller - Infra Destroy
      #   if: always()
      #   run: |
      #     ssh controller "
      #
      #         source .bash_profile
      #
      #         export ARM_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
      #
      #         export ARM_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
      #
      #         export ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      #
      #         export ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
      #
      #         export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
      #
      #         export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      #
      #         cd "${TEST_CONTROLLER_REPO_DIR}/${TEST_REPO_INFRA_DIR}"
      #
      #         ./${TEST_REPO_INFRA_DESTROY_SCRIPT}
      #
      #     "
      #
      # - name: Controller - Infra - Download Logs
      #   if: always()
      #   env:
      #     SSH_USER: ${{ env.TEST_VM_ADMIN_USERNAME }}
      #     REPO_LOGS_DIR: ${{ env.TEST_CONTROLLER_REPO_DIR }}/${{ env.TEST_REPO_INFRA_DIR }}/${{ env.TEST_REPO_INFRA_LOGS_DIR }}
      #     RUNNER_ASSET_DIR: ./${{ env.TEST_RUNNER_ASSETS_DIR }}/${{ env.TEST_RUNNER_ASSETS_INFRA_DIR }}/${{ env.TEST_REPO_INFRA_LOGS_DIR }}
      #   run: |
      #     mkdir -p ./${RUNNER_ASSET_DIR}
      #     sftp -p -r ${SSH_USER}:${REPO_LOGS_DIR}/* ${RUNNER_ASSET_DIR}
      #
      # - name: Archive Results
      #   if: always()
      #   env:
      #     RUNNER_ASSET_DIR: ./${{ env.TEST_RUNNER_ASSETS_DIR }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ env.TEST_ARCHIVE_RESULTS_NAME }}
      #     path: ${{ env.RUNNER_ASSET_DIR }}
      #     if-no-files-found: error
      #
      # - name: Teardown Controller
      #   if: ${{ always() && env.DEBUG_FLAG == 'false' }}
      #   run: |
      #     AZURE_RESOURCE_GROUP="${TEST_CONTROLLER_ID}-${TEST_AZURE_PROJECT}-rg"
      #     az group delete \
      #       --name $AZURE_RESOURCE_GROUP \
      #       --yes \
      #       --verbose
      #
      # - name: Check - Test - Create Issue if FAILED
      # # https://github.com/JasonEtco/create-an-issue
      #   if: failure()
      #   uses: JasonEtco/create-an-issue@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REF: ${{ github.repository }}/${{ github.ref }}
      #     WORKFLOW: ${{ github.workflow }}
      #     JOB: ${{ github.job }}
      #     EVENT_NAME: ${{ github.event_name }}
      #     VIEW_URL: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
      #   with:
      #     filename: .github/failed-test-template.md

###
# The End.
